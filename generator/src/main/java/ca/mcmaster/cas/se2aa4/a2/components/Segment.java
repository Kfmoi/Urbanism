package ca.mcmaster.cas.se2aa4.a2.components;

/**
 * Segment class which serves as a high-level recorder for the data generated by
 * the Generator and any properties from the Mesh when finalized before
 * conversion.
 */
public class Segment implements Seg {

    static int COLOUR_BIT_SIZE = 8;

    /**
     * Converts the given red, green, blue, and alpha values into a single integer
     * following Java's sRGB model.
     *
     * @param r
     * @param g
     * @param b
     * @param a
     * @return the colour in Java's sRGB format.
     */
    private static int toSRGB(int r, int g, int b, int a) {
        return (((((a << COLOUR_BIT_SIZE) | r) << COLOUR_BIT_SIZE) | g) << COLOUR_BIT_SIZE) | b;
    }

    private double x1, y1, x2, y2;
    private int colour;

    private float thickness;

    public Segment() {
    }

    /**
     * Creates a new Segment instance with the endpoints set to the given values.
     *
     * @param x1 The X-coordinate of the first endpoint.
     * @param y1 The Y-coordinate of the first endpoint.
     * @param x2 The X-coordinate of the second endpoint.
     * @param y2 The Y-coordinate of the second endpoint.
     */
    public Segment(double x1, double y1, double x2, double y2) {
        setEndpoints(x1, y1, x2, y2);
    }

    @Override
    public int compareTo(Seg s) {
        int comp = Double.compare(x1, s.getX1());
        if (comp != 0)
            return comp;
        comp = Double.compare(y1, s.getY1());
        if (comp != 0)
            return comp;
        comp = Double.compare(x2, s.getX2());
        if (comp != 0)
            return comp;
        return Double.compare(y2, s.getY2());
    }

    @Override
    public void setColour(int r, int g, int b, int a) {
        colour = toSRGB(r, g, b, a);
    }

    @Override
    public void setColour(int rgba) {
        colour = rgba;
    }

    @Override
    public void setThickness(float t) {
        thickness = t;
    }

    @Override
    public void setEndpoints(double x1, double y1, double x2, double y2) {
        if (Double.compare(x1, x2) > 0 || (Double.compare(x1, x2) == 0 && Double.compare(y1, y2) > 0)) {
            this.x1 = x2;
            this.y1 = y2;
            this.x2 = x1;
            this.y2 = y1;
        } else {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }
    }

    @Override
    public int getColour() {
        return colour;
    }

    @Override
    public double getX1() {
        return x1;
    }

    @Override
    public double getX2() {
        return x2;
    }

    @Override
    public double getY1() {
        return y1;
    }

    @Override
    public double getY2() {
        return y2;
    }

    @Override
    public float getThickness() {
        return thickness;
    }

}
